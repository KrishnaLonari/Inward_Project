package com.api.remitGuru.component.util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.crypto.Cipher;
import javax.crypto.Mac;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.json.JSONArray;
import org.json.JSONObject;

public class SingXIntegrations {
	static com.api.remitGuru.web.controller.SQLRepositoryController repository = new com.api.remitGuru.web.controller.SQLRepositoryController();

	final static String FILENAME = "SingXIntegrations.java";
	final static String LOGNAME = "SingXIntegrations";
	
	String TXNBASEPATH					= "";
	String SingXToken 					= "";
	String SingXEncryptionSecret		= "";
	String SGHKBaseURL 					= "";
	String AUBaseURL 					= "";
	String CongTxnBaseURL				= ""; 
	String IDFCClientKey				= "";
	String IDFCClientSecret				= "";
	String isDev						= "";
	
	SingXAPICaller singXAPICaller;
	
	public SingXIntegrations() {
		TXNBASEPATH					= EnvProperties.getPropertyValue("TxnBaseURL") == null ? "https://external-api-uat.singx.co/business" : EnvProperties.getPropertyValue("TxnBaseURL");
		
		SingXToken 					= EnvProperties.getPropertyValue("SingXToken") == null	? "210116:API-IDFS:Ztq4GAdREawJ8TbUUCGMO9pzT5Ot8i5rF4vEht5rr0cwf6xZ7Pom" : EnvProperties.getPropertyValue("SingXToken");
//		SingXEncryptionSecret 		= EnvProperties.getPropertyValue("SingXEncryptionSecret") == null	? "XfR51sLm8xmb76vHpK6di3/Vumk/k5c9dyH15Jx4vf8=" : EnvProperties.getPropertyValue("SingXEncryptionSecret");
		SingXEncryptionSecret		= SingXSecretKeyManager.getSecretKey();
		SGHKBaseURL 				= EnvProperties.getPropertyValue("SGHKBaseURL") == null ? "https://api-uat.singx.co/central" : EnvProperties.getPropertyValue("SGHKBaseURL");
		AUBaseURL 					= EnvProperties.getPropertyValue("AUBaseURL") == null	? "https://uatau.singx.co"	: EnvProperties.getPropertyValue("AUBaseURL");
	
		
		CongTxnBaseURL 				= EnvProperties.getPropertyValue("CongTxnBaseURL") == null ? "https://thirdparty-uat.api.gw.idfcfirstbank.com" : EnvProperties.getPropertyValue("CongTxnBaseURL");
		
		IDFCClientKey 				= EnvProperties.getPropertyValue("IDFCClientKey") == null ?  "5f29239b-ec57-4217-80ec-8365896f9db6": EnvProperties.getPropertyValue("IDFCClientKey");
		
		IDFCClientSecret 			= EnvProperties.getPropertyValue("IDFCClientSecret") == null ? "OpSSCyskwSGid0TEYguP61Ko6o": EnvProperties.getPropertyValue("IDFCClientSecret");

		isDev 						= EnvProperties.getPropertyValue("isDev") == null ? "false": EnvProperties.getPropertyValue("isDev");
		
		singXAPICaller				= new SingXAPICaller();
}
	

	public int insertSingXDetails(ArrayList singXData) {
		ArrayList<Object> params = new ArrayList<Object>();
		ArrayList<Integer> paramTypes = new ArrayList<Integer>();
		StringBuffer insQry = new StringBuffer();
		int insertResult = -1;
		// String currentdatetime =
		// SQLRepository.getCurrentDatetime((String)singXData.get(0));

		try {
			insQry.append(" INSERT INTO txnSingXDtls (				");
			insQry.append("			groupId,						");// 0
			insQry.append("			customerId,							");// 1
			insQry.append("			requestType,					");// 2
			insQry.append("			apiRequest,						");// 3
			insQry.append("			createdBy,						");// 4
			insQry.append("			createdDate  )	VALUES	(		");// 5
			insQry.append("		      ?,?,							");
			insQry.append("		      ?,?,			    			");
			insQry.append("		      ?,		    				");

			insQry.append("		  GETDATE()       )					");// createdDate

			params.add((String) singXData.get(0)); // groupId
			paramTypes.add(0);
			params.add((String) singXData.get(2)); // customerId
			paramTypes.add(0);
			params.add((String) singXData.get(4));
			paramTypes.add(0);
			params.add((String) singXData.get(3));
			paramTypes.add(0);
			params.add((String) singXData.get(2)); // createdBy
			paramTypes.add(0);

			try {
				/*
				 * if("ORACLE".equals(SQLRepository.getDatabaseType((String)singXData.get(0))))
				 * insertResult = repository.retrieveIdentityOracle(insQry, params, paramTypes,
				 * (String)singXData.get(0), new String [] { "txnSXId" }); else
				 */
				insertResult = repository.retrieveIdentity(insQry, params, paramTypes, (String) singXData.get(0));

				// if(insertResult != 1)
				Logger.log("insQry:\n" + insQry + " \n insertSingXDetails params : " + params + "\n insertResult : "
						+ insertResult, FILENAME, LOGNAME, null, Logger.INFO);
			} catch (Throwable t) {
				insertResult = -1;
				Logger.log("Error in insertSingXDetails inner catch", FILENAME, LOGNAME, t, Logger.CRITICAL);
			}
		} catch (Throwable t) {
			Logger.log("Error in insertSingXDetails", FILENAME, LOGNAME, t, Logger.CRITICAL);
			insertResult = -1;
		} finally {
			insQry = null;
			params = null;
			paramTypes = null;
		}

		return insertResult;
	}

	public int updateSingXDetails(ArrayList singXData) {
		ArrayList<Object> params = new ArrayList<Object>();
		ArrayList<Integer> paramTypes = new ArrayList<Integer>();
		StringBuffer updQry = new StringBuffer();
		int updateResult = -1;

		try {

			updQry.append(" UPDATE txnSingXDtls  SET	");
			updQry.append("		apiResponse		= ?,	");
			updQry.append("		apiStatus		= ?,	");

			updQry.append("		customerId	= ?,	");

			updQry.append("		updatedBy		= ?,	");
			updQry.append("		updatedDate = GETDATE()	");

			updQry.append(" WHERE						");
			updQry.append(" 	txnSXId			= ?		");

			params.add((String) singXData.get(6)); // apiResponse
			paramTypes.add(0);
			params.add((String) singXData.get(4)); // status
			paramTypes.add(0);
			params.add((String) singXData.get(8)); // consumerId
			paramTypes.add(0);
			params.add((String) singXData.get(1)); // apiResponse
			paramTypes.add(0);
			params.add((String) singXData.get(12)); // txnSXId
			paramTypes.add(0);

			updateResult = repository.executeQuery(updQry, params, paramTypes, (String) singXData.get(0));
			Logger.log("updQry : \n" + updQry + "\n updateSingXDetails params : " + params + "\n updateResult : "
					+ updateResult, FILENAME, LOGNAME, null, Logger.INFO);

		} catch (Throwable t) {
			Logger.log("Error in updateSingXDetails", FILENAME, LOGNAME, t, Logger.CRITICAL);
			updateResult = -1;
		} finally {
			updQry = null;
			params = null;
			paramTypes = null;
		}

		return updateResult;
	}

	public HashMap<String, String> callApi(String kongURL,String ApiUrl, HashMap<String, String> signXRequest,
			List<HashMap<String, String>> documents) {
		int result = -1, reqinsResult = -1;
		String success = "", customerId = "", message = "", statusMsg = "", errDesc = "", fullRequest = "",
				fullResponse = "", status = "Error", ReqResUpdationResult = "Error", responseCodeDescription = "";
		String isExist = "";

		HashMap<String, String> signXApiResponseHm = new HashMap<String, String>();
		HashMap<String, String> SignXResData = new HashMap<String, String>();

		String groupId = signXRequest.get("groupId");
		String loginId = signXRequest.get("loginId");
		String userId = signXRequest.get("userId");
		String apiName = signXRequest.get("apiName");
		String method = signXRequest.get("method");
		String country = signXRequest.get("countryCode") == null ? "" : signXRequest.get("countryCode");

		try {
			Logger.log("************	SIGNX API Call Starts Here	************", FILENAME, LOGNAME, null,
					Logger.INFO);
			Logger.log("ApiUrl : "+ApiUrl, FILENAME, LOGNAME, null,Logger.INFO);
			Logger.log("country : "+country, FILENAME, LOGNAME, null,Logger.INFO);
			Logger.log("signXRequest : "+signXRequest, FILENAME, LOGNAME, null,Logger.INFO);

			switch (apiName) {
			case "CheckExistingCustomer":
				fullRequest = generateExistingCustRequest(signXRequest, documents);
				break;
			case "GenerateOTP":
				fullRequest = generateOTPRequest(signXRequest);
				break;
			case "VerifyOTP":
				fullRequest = generateVerifyOTPRequest(signXRequest);
				break;
			case "Register":
				fullRequest = generateCustRegRequest(signXRequest, documents);
				break;
			case "CustStatus":
				fullRequest = generateCustStatusRequest(signXRequest);
				break;
			case "AuthSSO":
				fullRequest = generateAuthSSORequest(signXRequest);
				break;
			case "CustDetails":
				fullRequest = generateCustDtlsRequest(signXRequest);
				break;
			default:
				Logger.log("Invalid apiName : \n" + apiName, FILENAME, LOGNAME, null, Logger.INFO);
			}
			Logger.log("fullRequest : \n" + fullRequest, FILENAME, LOGNAME, null, Logger.INFO);

			ArrayList<String> info = new ArrayList<String>();

			info.add(groupId); // 0
			info.add(userId == null ? "0" : userId); // 1
			info.add(loginId == null ? "0" : loginId); // 2
			info.add(fullRequest); // 3
			info.add(apiName + "-" + country); // 4
			info.add("0"); // 5
			
			
			try {
				reqinsResult = insertSingXDetails(info);
				Logger.log("reqinsResult : " + reqinsResult, FILENAME, LOGNAME, null, Logger.INFO);

			} catch (Throwable t) {
				Logger.log("Error in insertSingXDetails  ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			}
			
			

			if (!fullRequest.equals("")) {
				if(isDev.equals("true")) {
					if (method.equals("POST"))
						fullResponse = singXAPICaller.excuteSingXEncryptedRequest(kongURL,ApiUrl, fullRequest, "POST", "application/json");
					else if (method.equals("GET"))
						fullResponse = singXAPICaller.excuteSingXEncryptedRequest(kongURL,ApiUrl, fullRequest, "GET", "application/json");
				}
				else {
					if (method.equals("POST"))
						fullResponse = excuteEncryptedRequest(kongURL,ApiUrl, fullRequest, "POST", "application/json");
					else if (method.equals("GET"))
						fullResponse = excuteEncryptedRequest(kongURL,ApiUrl, fullRequest, "GET", "application/json");
				}
				
				Logger.log("fullResponse : \n" + fullResponse, FILENAME, LOGNAME, null, Logger.INFO);

				if (!fullResponse.equals("")) {

					switch (apiName) {
					case "CheckExistingCustomer":
						signXApiResponseHm = readExistingCustResponse(fullResponse, country);
						break;
					case "GenerateOTP":
						signXApiResponseHm = readGenerateOTPResponse(fullResponse, country);
						break;
					case "VerifyOTP":
						signXApiResponseHm = readVerifyOTPResponse(fullResponse, country);
						break;
					case "Register":
						signXApiResponseHm = readCustRegResponse(fullResponse, country);
						break;
					case "CustStatus":
						signXApiResponseHm = readCustStatusResponse(fullResponse, country);
						break;
					case "AuthSSO":
						signXApiResponseHm = readAuthSSOResponse(fullResponse, country);
						break;
					case "CustDetails":
						signXApiResponseHm = readCustDtlsResponse(fullResponse, country);
						break;

					default:
						Logger.log("Invalid apiName : \n" + apiName, FILENAME, LOGNAME, null, Logger.INFO);

					}
					status = signXApiResponseHm.get("status") == null ? "" : signXApiResponseHm.get("status");
					success = signXApiResponseHm.get("success") == null ? "" : signXApiResponseHm.get("success");
					isExist = signXApiResponseHm.get("existingCustomer") == null ? ""
							: signXApiResponseHm.get("existingCustomer");
					customerId = signXApiResponseHm.get("customerId") == null ? loginId
							: signXApiResponseHm.get("customerId");
					errDesc = signXApiResponseHm.get("errDesc") == null ? "" : signXApiResponseHm.get("errDesc");

				} 
				else 
				{
					Logger.log("fullResponse is empty" + fullResponse, FILENAME, LOGNAME, null, Logger.INFO);
					status = "Error";
					errDesc = "Response is empty";
				}
			} 
			else 
			{
				Logger.log("fullRequest is empty : " + fullRequest, FILENAME, LOGNAME, null, Logger.INFO);
				status = "Error";
				errDesc = "Request is empty";
			}
			if (reqinsResult > 0) {
				ArrayList<String> updData = new ArrayList<String>();

				updData.add(groupId); // 0
				updData.add(loginId); // 1
				updData.add(""); // 2
				updData.add(userId); // 3
				updData.add(status); // 4
				updData.add(fullRequest.trim()); // 5
				updData.add(fullResponse.trim()); // 6
				updData.add(success); // 7
				updData.add(customerId); // 8
				updData.add(message); // 9
				updData.add(statusMsg); // 10
				updData.add(errDesc); // 11
				updData.add(String.valueOf(reqinsResult)); // 12
				updData.add(""); // 13

				try {
					result = updateSingXDetails(updData);
					Logger.log("updateSingXDetails result: " + result + "\t LoginId: " + loginId, FILENAME, LOGNAME,
							null, Logger.INFO);
					if (result >= 1)
						ReqResUpdationResult = "Success";
					else
						ReqResUpdationResult = "Update Records Fail";
				} catch (Throwable t) {
					result = -1;
					Logger.log("Error calling addEkycReqRes ", FILENAME, LOGNAME, t, Logger.CRITICAL);
				}
			}
		} catch (Throwable t) {
			Logger.log("## Error in callSignXapi ##", FILENAME, LOGNAME, t, Logger.CRITICAL);
			errDesc = "Error calling callSignXapi method ##";
			status = "Error";
		}

		
		SignXResData.put("responseString", fullResponse);
		SignXResData.put("ReqResUpdationResult", ReqResUpdationResult);
		SignXResData.put("errDesc", errDesc);
		SignXResData.put("status", status);

		return SignXResData;
	}

	public String generateExistingCustRequest(HashMap<String, String> singXRequestHm,
			List<HashMap<String, String>> documents) {
		StringBuilder jsonBuilder = new StringBuilder();
		String groupId = singXRequestHm.get("groupId");

		String request = "";

		String country = "";
		country = singXRequestHm.get("countryCode") == null ? "" : singXRequestHm.get("countryCode");

		if (country.equals("SG") || country.equals("HK")) {
			request = "{" + "\"source\":\"" + singXRequestHm.get("source") + "\"," + "\"idNumber\":\""
					+ singXRequestHm.get("idNumber") + "\"," + "\"email\":\"" + singXRequestHm.get("email") + "\""
					+ "}";
		} else if (country.equals("AU")) {
			if (documents.size() <= 0) {
				request = "{}";
			} else {
				jsonBuilder.append("{");

				jsonBuilder.append("\"documents\":[");

				for (int i = 0; i < documents.size(); i++) {
					Map<String, String> document = documents.get(i);
					jsonBuilder.append("{");
					int count = 0;
					for (Map.Entry<String, String> entry : document.entrySet()) {
						jsonBuilder.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue())
								.append("\"");
						count++;
						if (count < document.size()) {
							jsonBuilder.append(",");
						}
					}
					jsonBuilder.append("}");
					if (i < documents.size() - 1) {
						jsonBuilder.append(",");
					}
				}

				jsonBuilder.append("]");
				jsonBuilder.append("}");

				// Convert StringBuilder to String
				request = jsonBuilder.toString();
			}
		}

		return request;
	}

	private HashMap<String, String> readExistingCustResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", status = "", isExist = "false";
		/*
		 * SG HK - { "success": true, "customerId": "test12344@yopmail.com",
		 * "Onboarded": true }
		 * 
		 * AU - {"existingCustomer":false,"success":true}
		 */

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		if (null == fullResponse || fullResponse.isEmpty() || null == country || country.isEmpty())
			return signXApiResponse;

		try {
			resJsonObj = new JSONObject(fullResponse);

			success = resJsonObj.getString("success");

			if (country.equals("SG") || country.equals("HK")) {
				// {"existingCustomer":false,"success":false}
				isExist = resJsonObj.getString("existingCustomer");
			} else if (country.equals("AU")) {
				isExist = resJsonObj.getString("existingCustomer");
			}

			if (success.equals("true")) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			signXApiResponse.put("success", success);
			signXApiResponse.put("customerId", customerId);
			signXApiResponse.put("existingCustomer", isExist);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readSignXResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", status);
		}
		return signXApiResponse;
	}

	private String buildUrlWithParams(String baseUrl, HashMap<String, String> params) throws Exception {
        StringBuilder urlWithParams = new StringBuilder(baseUrl);
        urlWithParams.append("?");
        for (Map.Entry<String, String> entry : params.entrySet()) {
            urlWithParams.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
            urlWithParams.append("=");
            urlWithParams.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
            urlWithParams.append("&");
        }
        // Remove the last '&' character
        String finalUrl = urlWithParams.toString();
        return finalUrl.substring(0, finalUrl.length() - 1);
    }
	
	
	private String excuteRequest(String targetURL, String requestEntity, String method, String ContentType) {

		URL url;
		HttpURLConnection connection = null;
		StringBuffer response = new StringBuffer();
		

		try {
			// Create connection
			url = new URL(targetURL);
			connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod(method);

			connection.setRequestProperty("Content-Type", ContentType);
			connection.setRequestProperty("Content-Length", Integer.toString(requestEntity.getBytes().length));
			connection.setRequestProperty("Accept", "application/json");
			connection.setRequestProperty("token", SingXToken);
			connection.setRequestProperty("source", "DIGIREMIT_INWARD");
			connection.setConnectTimeout(50000);
			connection.setReadTimeout(50000);
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setUseCaches(false);

			// Send requestencry
			if (method.equals("POST")) {
				connection.setDoOutput(true);
				connection.setRequestMethod(method);
				DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
				wr.writeBytes(requestEntity);
				wr.flush();
				wr.close();
			}

			// Get Response
			InputStream is = null;
			if (connection.getResponseCode() >= 400) {
				is = connection.getErrorStream();
			} else {
				is = connection.getInputStream();
			}

			BufferedReader rd = new BufferedReader(new InputStreamReader(is));
			String line;

			while ((line = rd.readLine()) != null) {
				response.append(line);
				response.append("\r");
			}
			rd.close();
		} catch (Throwable t) {
			Logger.log("Connection Error: ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			response.append("");
		} finally {
			if (connection != null)
				connection.disconnect();
		}
		return response.toString();
	}

	private String excuteEncryptedRequest(String targetURL, String signatureURL, String requestEntity, String method, String ContentType) {
		
	    Logger.log("In excuteEncryptedRequestJava : ", FILENAME, LOGNAME, null, Logger.INFO);
	    Logger.log("RtargetURL : "+targetURL, FILENAME, LOGNAME, null, Logger.INFO);
	    Logger.log("signatureURL : "+signatureURL, FILENAME, LOGNAME, null, Logger.INFO);
	    Logger.log("Request before encryption : "+requestEntity, FILENAME, LOGNAME, null, Logger.INFO);
	    
	    URL url;
	    HttpURLConnection connection = null;
	    StringBuffer response = new StringBuffer();
	    
	    String signatureSalt ="", signature="", decryptedPayload=""; 
	    long timestamp=0l;
	    JSONObject payload = new JSONObject();
	    
	    
	    
        try {
	        SecureRandom random = new SecureRandom();
	        byte[] saltBytes = new byte[16];
	        
			random.nextBytes(saltBytes);
	        signatureSalt = Base64.getEncoder().encodeToString(saltBytes);
			
	        timestamp = (System.currentTimeMillis() / 1000) - 10;
	        
	        String toSign = method.toLowerCase() + signatureURL + signatureSalt + timestamp + SingXEncryptionSecret;
	        
	       

		   Mac mac = Mac.getInstance("HmacSHA256");
	        SecretKeySpec secretKeySpec = new SecretKeySpec(SingXEncryptionSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
	        mac.init(secretKeySpec);
	        byte[] hmacSha256 = mac.doFinal(toSign.getBytes(StandardCharsets.UTF_8));
	        signature = Base64.getEncoder().encodeToString(hmacSha256);

	        SecretKeySpec keySpec = new SecretKeySpec(Base64.getDecoder().decode(SingXEncryptionSecret), "AES");
			
			
	        IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(signatureSalt));
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
			
			
	        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);
	        if (method.equals("POST")) {
		        byte[] encryptedBytes = cipher.doFinal(requestEntity.getBytes(StandardCharsets.UTF_8));
		        String encryptedPayload = Base64.getEncoder().encodeToString(encryptedBytes);
		
		        payload.put("data", encryptedPayload);
		        System.out.println("payload >> " + payload);
	        }
        
		}catch (Exception t) {
		}
	    
	    Logger.log("Encryption headers : \n method : "+method.toLowerCase() 
	                                    +"\n signatureURL : "+signatureURL
	                                    +"\n signatureSalt : "+signatureSalt
	                                    +"\n timestamp : "+timestamp
	                                    +"\n secret : "+SingXEncryptionSecret
	                                    +"\n requestEntity : "+requestEntity
	                                    +"\n payload : "+payload, FILENAME, LOGNAME, null, Logger.INFO);
	    

	    try {
	        
	        String auth = IDFCClientKey + ":" + IDFCClientSecret;
	        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")));
	        //String idfCToken = new String(encodedAuth);
	        String idfCToken = KongBearerTokenManager.getBearerToken();
	        // Create connection
	        
	        url = new URL(targetURL);
	        connection = (HttpURLConnection) url.openConnection();
	        connection.setRequestMethod(method);
	        
	        connection.setRequestProperty("Content-Type", ContentType);
	        connection.setRequestProperty("Content-Length", Integer.toString(payload.toString().getBytes().length));
	        connection.setRequestProperty("Accept", "application/json");
	        connection.setRequestProperty("Authorization", "Bearer " + idfCToken);
			connection.setRequestProperty("source", "DIGIREMIT_INWARD");

	        connection.setConnectTimeout(50000);
	        connection.setReadTimeout(50000);
	        connection.setDoOutput(true);
	        connection.setDoInput(true);
	        connection.setUseCaches(false);
	        
	        Logger.log("Request Headers: ", FILENAME, LOGNAME, null, Logger.INFO);
	        Logger.log("Bearer - idfCToken: "+idfCToken+", \n signature : "+signature+",\n signatureSalt : "+signatureSalt+"\n token : "+SingXToken+", timestamp :"+timestamp+",\n signatureSalt : "+signatureSalt, FILENAME, LOGNAME, null, Logger.INFO);
	        
	        // Send request
	        //if (method.equals("POST")) {
	            
	            //Set headers for encryption request-->
	            connection.setRequestProperty("x-signature", signature);
	            connection.setRequestProperty("x-salt", signatureSalt);
	            connection.setRequestProperty("x-api-key", SingXToken);
	            connection.setRequestProperty("x-timestamp", ""+timestamp);
	            connection.setRequestProperty("x-api-iv", signatureSalt);
	            
	            connection.setDoOutput(true);
	            connection.setRequestMethod(method);
	            if (method.equals("POST")) {
	                DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
	                wr.writeBytes(payload.toString());
	                wr.flush();
	                wr.close();
	            }
	        //}
	        
//					Logging all headers of connection -->
	        /*Logger.log("Request Headers: ", FILENAME, LOGNAME, null, Logger.INFO);
	        for (Map.Entry<String, java.util.List<String>> header : connection.getRequestProperties().entrySet()) {
	            Logger.log(header.getKey() + ": " + header.getValue(), FILENAME, LOGNAME, null, Logger.INFO);
	        }
	        */
	        // Get Response
	        InputStream is = null;
	        if (connection.getResponseCode() >= 400) {
	            is = connection.getErrorStream();
	        } else {
	            is = connection.getInputStream();
	        }
	        
	        Logger.log("Response headers : ", FILENAME, LOGNAME, null, Logger.INFO);

			for (Map.Entry<String, java.util.List<String>> header : connection.getHeaderFields().entrySet()) {
    			Logger.log(header.getKey() + ": " + header.getValue(), FILENAME, LOGNAME, null, Logger.INFO);

            }


	        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
	        String line;

	        while ((line = rd.readLine()) != null) {
	            response.append(line);
	            response.append("\r");
	        }
	        rd.close();
	        
	        Logger.log(" response : " + response, FILENAME, LOGNAME, null, Logger.INFO);
	        
	        //Decode response code start here
	        JSONObject jsonObject = new JSONObject(response.toString());
	        SecretKeySpec keySpec = new SecretKeySpec(Base64.getDecoder().decode(SingXEncryptionSecret), "AES");
	        IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(signatureSalt));
	        byte[] encryptedBytes = Base64.getDecoder().decode(jsonObject.getString("body"));
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);
	        byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
	        decryptedPayload = new String(decryptedBytes, StandardCharsets.UTF_8);
	        
	        Logger.log("decryptedPayload : " + decryptedPayload, FILENAME, LOGNAME, null, Logger.INFO);
	        
	    } catch (Throwable t) {
	        decryptedPayload="";
	        Logger.log("Connection Error: ", FILENAME, LOGNAME, t, Logger.CRITICAL);
	    } finally {
	        if (connection != null)
	            connection.disconnect();
	    }
	    return decryptedPayload.toString();
	}
	
	

	public String generateOTPRequest(HashMap<String, String> signXRequest) {
		String source = signXRequest.get("source") == null ? "" : signXRequest.get("source").toString();
		String customerId = signXRequest.get("customerId") == null ? "" : signXRequest.get("customerId").toString();

		String ekycRequest = "{" + "\"source\":\"" + source + "\"," + "\"customerId\":\"" + customerId + "\"" + "}";
		Logger.log("generateOTPRequest returning : \n" + ekycRequest, FILENAME, LOGNAME, null, Logger.INFO);

		return ekycRequest;
	}

	private HashMap<String, String> readGenerateOTPResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", message = "";
		int status = -1;

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		try {
			resJsonObj = new JSONObject(fullResponse);
			if (country.equals("AU")) {
				status = resJsonObj.has("status") ? resJsonObj.getInt("status") : 0;
				message = resJsonObj.has("message") ? resJsonObj.getString("message") : "";
				if (status == 200) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}
			} else if (country.equals("SG") || country.equals("HK")) {
				success = resJsonObj.has("success") ? resJsonObj.getString("success") : "";
				if (success.equals("true")) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}
			}

			signXApiResponse.put("message", message);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readSignXResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", message);
		}
		return signXApiResponse;
	}

	private void callExistingCustAPI(String country) {
		String apiStatus = "", source = "SG", email = "test26072023@singx.co", idNumber = "", ApiUrl = "";

		if (country.equals("SG") || country.equals("HK")) {
			ApiUrl = SGHKBaseURL + "/external-onboarding/checkexistingcustomer";
		} else if (country.equals("AU")) {
			ApiUrl = AUBaseURL + "/singx/customer/checkExistingCustomer";
		}

		HashMap<String, String> signXRequest = new HashMap<String, String>();
		HashMap<String, String> resMap = new HashMap<String, String>();

		signXRequest.put("source", source);
		signXRequest.put("email", email);
		signXRequest.put("idNumber", idNumber);
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		// signXRequest.put("countryCode", "AU");
		signXRequest.put("countryCode", country);
		signXRequest.put("apiName", "CheckExistingCustomer");
		signXRequest.put("method", "POST");

		List<HashMap<String, String>> documents = new ArrayList<>();

		HashMap<String, String> document1 = new HashMap<>();
		document1.put("documentType", "Australian Driving License");
		document1.put("licenceNumber", "94977000");
		documents.add(document1);

		HashMap<String, String> document2 = new HashMap<>();
		document2.put("documentType", "Medicare");
		document2.put("cardNumber", "3512743581");
		documents.add(document2);

		HashMap<String, String> document3 = new HashMap<>();
		document3.put("documentType", "Passport");
		document3.put("passportNumber", "C5100511");
		documents.add(document3);

		try {
			resMap = callApi("",ApiUrl, signXRequest, documents);
			apiStatus = resMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
	}

	private void callGenerateOTP(String country) {
		String apiStatus = "", source = "SG", ApiUrl = "";
		String customerId = "1000000114";

		HashMap<String, String> signXRequest = new HashMap<String, String>();
		HashMap<String, String> finalMap = new HashMap<String, String>();

		signXRequest.put("customerId", customerId);
		signXRequest.put("source", source);
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("countryCode", country);
		// signXRequest.put("countryCode", "SG");
		signXRequest.put("apiName", "GenerateOTP");

		signXRequest.put("email", "balajimay14001@gmail.com");
		signXRequest.put("phoneNumber", "12345678");
		signXRequest.put("phoneCountryCode", "65");
		signXRequest.put("firstName", "test");
		signXRequest.put("middleName", "test");
		signXRequest.put("lastName", "test");
		signXRequest.put("occupation", "");
		signXRequest.put("occupationOthers", "test");
		signXRequest.put("residentStatus", "Citizen");
		signXRequest.put("employerName", "SingX");
		signXRequest.put("unitNo", "unit");
		signXRequest.put("blockNo", "block");
		signXRequest.put("streetName", "123");
		signXRequest.put("buildingName", "123");
		signXRequest.put("city", "");
		signXRequest.put("state", "");
		signXRequest.put("postalCode", "test");

		signXRequest.put("salutaion", "Miss");
		signXRequest.put("dateOfBirth", "1965-01-01");
		signXRequest.put("nationality", "Aland Islands");
		signXRequest.put("residenceType", "Special Category visa");
		signXRequest.put("occupation", "Domestic Helper");
		signXRequest.put("otherOccupation", "");
		signXRequest.put("employer", "SingX");
		signXRequest.put("estimatedTxnamount", "AU$5,000-10,000");
		signXRequest.put("annualIncome", "AU$5,000-10,000");
		signXRequest.put("countryCodeNum", "+61");
		signXRequest.put("phoneNumber", "86423437");
		signXRequest.put("address", "Testar Grove, Caulfield North VIC 3161, Australia");
		signXRequest.put("addressLine1", "23");
		signXRequest.put("addressLine2", "NA");
		signXRequest.put("addressLine3", "NA");
		signXRequest.put("addressLine4", "NA");
		signXRequest.put("addressLine5", "City of Glen Eira");
		signXRequest.put("country", "Australia");
		signXRequest.put("postalCode", "3161");
		signXRequest.put("cra", "true");
		signXRequest.put("state", "Queensland");

		if (country.equals("SG") || country.equals("HK")) {
			ApiUrl = SGHKBaseURL + "/external-onboarding/otp/generate";
			signXRequest.put("method", "POST");
		} else if (country.equals("AU")) {
			signXRequest.put("method", "GET");
			ApiUrl = AUBaseURL + "/singx/OTP/generate?customerId=" + customerId;
		}

		try {
			finalMap = callApi("",ApiUrl, signXRequest, new ArrayList<>());
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
	}

//	Verify OTP Starts -->

	public String generateVerifyOTPRequest(HashMap<String, String> signXRequest) {

		String customerId = signXRequest.get("customerId") == null ? "" : signXRequest.get("customerId").toString();
		String otp = signXRequest.get("otp") == null ? "" : signXRequest.get("otp").toString();
		String country = signXRequest.get("countryCode") == null ? "" : signXRequest.get("countryCode");

		String ekycRequest = "";

		if (country.equals("SG") || country.equals("HK")) {
			String source = signXRequest.get("source") == null ? "" : signXRequest.get("source").toString();
			ekycRequest = "{" + "\"source\":\"" + source + "\"," + "\"customerId\":\"" + customerId + "\","
					+ "\"otp\":\"" + otp + "\"" + "}";
		} else if (country.equals("AU")) {
			ekycRequest = "{" + "\"customerId\":\"" + customerId + "\"," + "\"otp\":\"" + otp + "\"" + "}";

		}
		Logger.log("ekycRequest returning : \n" + ekycRequest, FILENAME, LOGNAME, null, Logger.INFO);

		return ekycRequest;
	}

	private HashMap<String, String> readVerifyOTPResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", status = "", isExist = "false",
				message = "";
		/*
		 * SG HK - {
		 * 
		 * }
		 * 
		 * AU - { "timestamp": 1724304418256, "status": 500, "error":
		 * "Internal Server Error", "message": "Contacts not available", "path":
		 * "/singx/OTP/verify" }
		 */

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		if (null == fullResponse || fullResponse.isEmpty() || null == country || country.isEmpty())
			return signXApiResponse;

		try {
			resJsonObj = new JSONObject(fullResponse);

			if (country.equals("SG") || country.equals("HK")) {
				if (success.equals("true")) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}
			} else if (country.equals("AU")) {
				int statusInt = resJsonObj.has("status") ? resJsonObj.getInt("status") : 0;

				if (statusInt > 0 && statusInt <= 400) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}

				message = resJsonObj.getString("message");
			}

			signXApiResponse.put("success", success);
			signXApiResponse.put("message", message);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readSignXResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", status);
		}
		return signXApiResponse;
	}

	public void callVerifyOTPApi(String country) {
		int result = -1, reqinsResult = -1;
		String ApiUrl = "", success = "", customerId = "", message = "", statusMsg = "", errDesc = "", fullRequest = "",
				apiStatus = "Error", ReqResUpdationResult = "Error", responseCodeDescription = "";
		String isExist = "";

		HashMap<String, String> signXApiResponseHm = new HashMap<String, String>();
		HashMap<String, String> SignXResData = new HashMap<String, String>();
		HashMap<String, String> signXRequest = new HashMap<String, String>();
		HashMap<String, String> finalMap = new HashMap<String, String>();

		signXRequest.put("source", "SG");
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("countryCode", "AU");
		// signXRequest.put("countryCode", "SG");
		signXRequest.put("customerId", "66B6486A-6B7C-428C-8042-843A8D541138");
		signXRequest.put("otp", "125421");
		signXRequest.put("apiName", "VerifyOTP");

		if (country.equals("SG") || country.equals("HK")) {
			signXRequest.put("method", "POST");
			ApiUrl = SGHKBaseURL + "/external-onboarding/otp/verify";
		} else if (country.equals("AU")) {
			signXRequest.put("method", "POST");
			ApiUrl = AUBaseURL + "/singx/OTP/verify";
		}

		try {
			finalMap = callApi("",ApiUrl, signXRequest, new ArrayList<HashMap<String, String>>());
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
		} catch (Throwable t) {
			Logger.log("## Error in callSignXapi ##", FILENAME, LOGNAME, t, Logger.CRITICAL);
		}

	}
//	Verify OTP Ends 

//	Register API starts -->

	public String generateCustRegRequest(HashMap<String, String> signXRequest,
			List<HashMap<String, String>> documentsList) {
		StringBuilder jsonRequest = new StringBuilder();

		String country = signXRequest.get("countryCode") == null ? "" : signXRequest.get("countryCode");

		String ekycRequest = "";

		if (country.equals("SG") || country.equals("HK")) {

			jsonRequest.append("{").append("\"source\":\"").append(signXRequest.get("source")).append("\",")
					.append("\"email\":\"").append(signXRequest.get("email")).append("\",").append("\"phoneNumber\":\"")
					.append(signXRequest.get("phoneNumber")).append("\",").append("\"phoneCountryCode\":\"")
					.append(signXRequest.get("phoneCountryCode")).append("\",")

					.append("\"details\":{").append("\"firstName\":\"").append(signXRequest.get("firstName"))
					.append("\",").append("\"middleName\":\"").append(signXRequest.get("middleName")).append("\",")
					.append("\"lastName\":\"").append(signXRequest.get("lastName")).append("\",")
					.append("\"occupation\":\"").append(signXRequest.get("occupation")).append("\",")
					.append("\"occupationOthers\":\"").append(signXRequest.get("occupationOthers")).append("\",")
					.append("\"residentStatus\":\"").append(signXRequest.get("residentStatus")).append("\",")
					.append("\"employerName\":\"").append(signXRequest.get("employerName")).append("\",")
					.append("\"unitNo\":\"").append(signXRequest.get("unitNo")).append("\",").append("\"blockNo\":\"")
					.append(signXRequest.get("blockNo")).append("\",").append("\"streetName\":\"")
					.append(signXRequest.get("streetName")).append("\",").append("\"buildingName\":\"")
					.append(signXRequest.get("buildingName")).append("\",").append("\"city\":\"")
					.append(signXRequest.get("city")).append("\",").append("\"state\":\"")
					.append(signXRequest.get("state")).append("\",").append("\"postalCode\":\"")
					.append(signXRequest.get("postalCode")).append("\"").append("}").append("}");

			ekycRequest = jsonRequest.toString();
		} else if (country.equals("AU")) {
			jsonRequest = new StringBuilder();

			jsonRequest.append("{").append("\"email\":\"").append(signXRequest.get("email")).append("\",")
					.append("\"salutation\":\"").append(signXRequest.get("salutation")).append("\",")
					.append("\"firstName\":\"").append(signXRequest.get("firstName")).append("\",")
					.append("\"middleName\":\"").append(signXRequest.get("middleName")).append("\",")
					.append("\"lastName\":\"").append(signXRequest.get("lastName")).append("\",")
					.append("\"dateOfBirth\":\"").append(signXRequest.get("dateOfBirth")).append("\",")
					.append("\"nationality\":\"").append(signXRequest.get("nationality")).append("\",")
					.append("\"residenceType\":\"").append(signXRequest.get("residenceType")).append("\",")
					.append("\"occupation\":\"").append(signXRequest.get("occupation")).append("\",")
					.append("\"otherOccupation\":\"").append(signXRequest.get("otherOccupation")).append("\",")
					.append("\"employer\":\"").append(signXRequest.get("employer")).append("\",")
					.append("\"estimatedTxnamount\":\"").append(signXRequest.get("estimatedTxnamount")).append("\",")
					.append("\"annualIncome\":\"").append(signXRequest.get("annualIncome")).append("\",")
					.append("\"countryCode\":\"").append(signXRequest.get("countryCodeNum")).append("\",")
					.append("\"phoneNumber\":\"").append(signXRequest.get("phoneNumber")).append("\",")
					.append("\"address\":\"").append(signXRequest.get("address")).append("\",")
					.append("\"addressLine1\":\"").append(signXRequest.get("addressLine1")).append("\",")
					.append("\"addressLine2\":\"").append(signXRequest.get("addressLine2")).append("\",")
					.append("\"addressLine3\":\"").append(signXRequest.get("addressLine3")).append("\",")
					.append("\"addressLine4\":\"").append(signXRequest.get("addressLine4")).append("\",")
					.append("\"addressLine5\":\"").append(signXRequest.get("addressLine5")).append("\",")
					.append("\"country\":\"").append(signXRequest.get("country")).append("\",")
					.append("\"postalCode\":\"").append(signXRequest.get("postalCode")).append("\",").append("\"cra\":")
					.append(signXRequest.get("cra")).append(",").append("\"state\":\"")
					.append(signXRequest.get("state")).append("\",");

			// Append documents list
			jsonRequest.append("\"documents\":[");
			for (int i = 0; i < documentsList.size(); i++) {
				Map<String, String> document = documentsList.get(i);
				jsonRequest.append("{");
				jsonRequest.append("\"documenttype\":\"").append(document.getOrDefault("documenttype", ""))
						.append("\",");
				jsonRequest.append("\"referrenceNo\":\"").append(document.getOrDefault("referrenceNo", ""))
						.append("\",");
				jsonRequest.append("\"dateOfExpiry\":\"").append(document.getOrDefault("dateOfExpiry", ""))
						.append("\",");
				jsonRequest.append("\"stateOfIssue\":\"").append(document.getOrDefault("stateOfIssue", ""))
						.append("\",");
				jsonRequest.append("\"cardType\":\"").append(document.getOrDefault("cardType", "")).append("\",");
				jsonRequest.append("\"indvReferrenceNo\":\"").append(document.getOrDefault("indvReferrenceNo", ""))
						.append("\",");
				jsonRequest.append("\"mcName\":\"").append(document.getOrDefault("mcName", "")).append("\",");
				jsonRequest.append("\"dlFName\":\"").append(document.getOrDefault("dlFName", "")).append("\",");
				jsonRequest.append("\"dlMName\":\"").append(document.getOrDefault("dlMName", "")).append("\",");
				jsonRequest.append("\"dlLName\":\"").append(document.getOrDefault("dlLName", "")).append("\",");
				jsonRequest.append("\"ppFName\":\"").append(document.getOrDefault("ppFName", "")).append("\",");
				jsonRequest.append("\"ppMName\":\"").append(document.getOrDefault("ppMName", "")).append("\",");
				jsonRequest.append("\"ppLName\":\"").append(document.getOrDefault("ppLName", "")).append("\",");
				jsonRequest.append("\"gender\":\"").append(document.getOrDefault("gender", "")).append("\"");
				jsonRequest.append("}");

				if (i < documentsList.size() - 1) {
					jsonRequest.append(",");
				}
			}
			jsonRequest.append("]");

			jsonRequest.append("}");

			ekycRequest = jsonRequest.toString();

		}
		Logger.log("generateCustRegRequest returning : \n" + ekycRequest, FILENAME, LOGNAME, null, Logger.INFO);

		return ekycRequest;
	}

	private HashMap<String, String> readCustRegResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", status = "", isExist = "false",
				token = "", message = "";
		/*
		 * SG HK - { "success": true, "customerId": "test26072023@singx.co", "message":
		 * "successfull", "status": "SIGNUP_COMPLETE" }
		 * 
		 * AU -
		 * {"success":true,"token":"c3dldGhhQHNpbmd4LmNv:MjEwMDI1:TfIV6KVYCWQr1R2CGg0l"}
		 */

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		if (null == fullResponse || fullResponse.isEmpty() || null == country || country.isEmpty())
			return signXApiResponse;

		try {
			resJsonObj = new JSONObject(fullResponse);

			if (country.equals("SG") || country.equals("HK")) {
				success = resJsonObj.getString("success");

				if (success.equals("true")) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}

			} else if (country.equals("SG") || country.equals("HK")) {
				customerId = resJsonObj.getString("customerId");
				status = resJsonObj.getString("status");

				if (status.equals("Accepted")) {
					signXApiResponse.put("status", "Success");
				} else if (status.equals("Rejected")) {
					signXApiResponse.put("status", "Error");
				}

			}

			signXApiResponse.put("success", success);
			signXApiResponse.put("token", token);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readCustStatusResponse(): " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", status);
		}
		return signXApiResponse;
	}

	private void callCustRegAPI(String country) {
		String apiStatus = "", source = "SG", ApiUrl = "";

		HashMap<String, String> finalMap = new HashMap<String, String>();
		HashMap<String, String> signXRequest = new HashMap<String, String>();
        List<HashMap<String, String>> documents = new ArrayList<>();

		signXRequest.put("source", source);
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("countryCode", country);
		// signXRequest.put("countryCode", "SG");
		signXRequest.put("apiName", "Register");
		
		if(country.equals("SG") || country.equals("HK")){
			signXRequest.put("source", "SG");
	        signXRequest.put("email", "balajimay14001@gmail.com");
	        signXRequest.put("phoneNumber", "12345678");
	        signXRequest.put("phoneCountryCode", "65");
	        signXRequest.put("firstName", "test");
	        signXRequest.put("middleName", "test");
	        signXRequest.put("lastName", "test");
	        signXRequest.put("occupation", "");
	        signXRequest.put("occupationOthers", "test");
	        signXRequest.put("residentStatus", "Citizen");
	        signXRequest.put("employerName", "SingX");
	        signXRequest.put("unitNo", "unit");
	        signXRequest.put("blockNo", "block");
	        signXRequest.put("streetName", "123");
	        signXRequest.put("buildingName", "123");
	        signXRequest.put("city", "");
	        signXRequest.put("state", "");
	        signXRequest.put("postalCode", "test");
		}
		else if(country.equals("AU") ){
	        signXRequest.put("email", "testonboar10202343@singx.co");
	        signXRequest.put("salutaion", "Miss");
	        signXRequest.put("firstName", "John");
	        signXRequest.put("middleName", "");
	        signXRequest.put("lastName", "Smith");
	        signXRequest.put("dateOfBirth", "1965-01-01");
	        signXRequest.put("nationality", "Aland Islands");
	        signXRequest.put("residenceType", "Special Category visa");
	        signXRequest.put("occupation", "Domestic Helper");
	        signXRequest.put("otherOccupation", "");
	        signXRequest.put("employer", "SingX");
	        signXRequest.put("estimatedTxnamount", "AU$5,000-10,000");
	        signXRequest.put("annualIncome", "AU$5,000-10,000");
	        signXRequest.put("countryCodeNum", "+61");
	        signXRequest.put("phoneNumber", "86423437");
	        signXRequest.put("address", "Testar Grove, Caulfield North VIC 3161, Australia");
	        signXRequest.put("addressLine1", "23");
	        signXRequest.put("addressLine2", "NA");
	        signXRequest.put("addressLine3", "NA");
	        signXRequest.put("addressLine4", "NA");
	        signXRequest.put("addressLine5", "City of Glen Eira");
	        signXRequest.put("country", "Australia");
	        signXRequest.put("postalCode", "3161");
	        signXRequest.put("cra", "true");
	        signXRequest.put("state", "Queensland");
	        

	        // Document 1
	        HashMap<String, String> document1 = new HashMap<>();
	        document1.put("documenttype", "Australian Driving License");
	        document1.put("referrenceNo", "94977000");
	        document1.put("dateOfExpiry", "2022-11-29");
	        document1.put("stateOfIssue", "Queensland");
	        document1.put("dlFName", "John");
	        document1.put("dlMName", "");
	        document1.put("dlLName", "smith");
	        document1.put("dlCardNo", "sdkjfbd");
	        documents.add(document1);

	        // Document 2
	        HashMap<String, String> document2 = new HashMap<>();
	        document2.put("documenttype", "Medicare Card");
	        document2.put("referrenceNo", "3512743581");
	        document2.put("dateOfExpiry", "2030-12-01");
	        document2.put("cardType", "Green");
	        document2.put("indvReferrenceNo", "1");
	        document2.put("mcName", "John Robert Smith");
	        documents.add(document2);

	        // Document 3
	        HashMap<String, String> document3 = new HashMap<>();
	        document3.put("documenttype", "Passport");
	        document3.put("referrenceNo", "C5100511");
	        document3.put("dateOfExpiry", "2022-11-30");
	        document3.put("ppFName", "first name");
	        document3.put("ppMName", "df");
	        document3.put("ppLName", "last name");
	        document3.put("gender", "Male");
	        documents.add(document3);

		}

		if (country.equals("SG") || country.equals("HK")) {
			ApiUrl = SGHKBaseURL + "/external-onboarding/register";
			signXRequest.put("method", "POST");
		} else if (country.equals("AU")) {
			signXRequest.put("method", "POST");
			ApiUrl = AUBaseURL + "/singx/customer/register";
		}

		try {
			finalMap = callApi("",ApiUrl, signXRequest, documents);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
	}

//	Register API Ends

//	Cust Status API Starts -->

	public String generateCustStatusRequest(HashMap<String, String> requestMap) {
		StringBuilder jsonRequest = new StringBuilder();

		String country = requestMap.get("countryCode") == null ? "" : requestMap.get("countryCode");

		String ekycRequest = "";

		if (country.equals("SG") || country.equals("HK")) {

			jsonRequest.append("{");
			jsonRequest.append("\"source\":\"").append(requestMap.getOrDefault("source", "")).append("\",");
			jsonRequest.append("\"customerId\":\"").append(requestMap.getOrDefault("customerId", "")).append("\"");

			jsonRequest.append("}");

			ekycRequest = jsonRequest.toString();
		} else if (country.equals("AU")) {
			jsonRequest = new StringBuilder();

			jsonRequest.append(requestMap.getOrDefault("customerId", ""));

			ekycRequest = jsonRequest.toString();

		}
		Logger.log("generateCustStatusRequest returning : \n" + ekycRequest, FILENAME, LOGNAME, null, Logger.INFO);

		return ekycRequest;
	}

	private HashMap<String, String> readCustStatusResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", status = "", isExist = "false",
				message = "";
		/*
		 * SG HK - { "success": true, "status": "ONBOARDED" }
		 * 
		 * AU - { "success": 200, "Onboarded": false }
		 */

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		if (null == fullResponse || fullResponse.isEmpty() || null == country || country.isEmpty())
			return signXApiResponse;

		try {
			resJsonObj = new JSONObject(fullResponse);

			if (country.equals("SG") || country.equals("HK")) {
				status = resJsonObj.getString("status");
				if(status.equalsIgnoreCase("ONBOARDED"))
					status = "ONBOARDED";
				success = resJsonObj.getString("success");
				if (success.equals("true")) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}

			} else if (country.equals("AU")) {
				success = resJsonObj.getString("success");
				status = resJsonObj.getString("Onboarded");
				if(status.equals("true"))
					status = "ONBOARDED";
				if (success.equals("200")) {
					signXApiResponse.put("status", "Success");
				} else {
					signXApiResponse.put("status", "Error");
				}

			}

			signXApiResponse.put("success", success);
			signXApiResponse.put("status", status);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readCustStatusResponse(): " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", status);
		}
		return signXApiResponse;
	}

	private void callCustStatus(String country) {
		String apiStatus = "", source = "SG", ApiUrl = "";
		String customerId = "test26072023@singx.co";

		HashMap<String, String> signXRequest = new HashMap<String, String>();
		HashMap<String, String> finalMap = new HashMap<String, String>();

		signXRequest.put("customerId", customerId);
		signXRequest.put("source", source);
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("countryCode", country);
		// signXRequest.put("countryCode", "SG");
		signXRequest.put("apiName", "CustStatus");

		if (country.equals("SG") || country.equals("HK")) {
			ApiUrl = SGHKBaseURL + "/external-onboarding/customerstatus";
			signXRequest.put("method", "POST");
		} else if (country.equals("AU")) {
			signXRequest.put("method", "GET");
			ApiUrl = AUBaseURL + "/singx/customer/external/status?customerId=" + customerId;
		}

		try {
			finalMap = callApi("",ApiUrl, signXRequest, new ArrayList<>());
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
	}
	
//	Cust Status API Ends!!!

//	Auth SSO API Starts -->

	public String generateAuthSSORequest(HashMap<String, String> signXRequest) {
		StringBuilder jsonRequest = new StringBuilder();

		String country = signXRequest.get("countryCode") == null ? "" : signXRequest.get("countryCode");

		String ekycRequest = "";

		if (country.equals("SG") || country.equals("HK")) {

			jsonRequest.append("{");
			jsonRequest.append("\"source\":\"").append(signXRequest.getOrDefault("source", "")).append("\",");
			jsonRequest.append("\"customerId\":\"").append(signXRequest.getOrDefault("customerId", "")).append("\"");

			jsonRequest.append("}");

			ekycRequest = jsonRequest.toString();
		} else if (country.equals("AU")) {
			jsonRequest = new StringBuilder();

			jsonRequest.append("{").append("\"customerId\":\"").append(signXRequest.get("customerId")).append("\",")
					.append("\"source\":\"").append(signXRequest.get("source")).append("\"").append("}");

			ekycRequest = jsonRequest.toString();

		}
		Logger.log("generateAuthSSORequest returning : \n" + ekycRequest, FILENAME, LOGNAME, null, Logger.INFO);

		return ekycRequest;
	}

	private HashMap<String, String> readAuthSSOResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", status = "", isExist = "false",
				message = "";
		/*
		 * SG HK - { "success": true, "token": "ChcnK9P7StpsW3br5aB8" }
		 * 
		 * AU -
		 * {"success":true,"token":"c3dldGhhQHNpbmd4LmNv:MjEwMDI1:TfIV6KVYCWQr1R2CGg0l"}
		 */

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		if (null == fullResponse || fullResponse.isEmpty() || null == country || country.isEmpty())
			return signXApiResponse;

		try {
			resJsonObj = new JSONObject(fullResponse);

			String token = resJsonObj.getString("token");
			success = resJsonObj.getString("success");

			if (success.equals("true")) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			signXApiResponse.put("success", success);
			signXApiResponse.put("token", token);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readCustStatusResponse(): " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", status);
		}
		return signXApiResponse;
	}

	private void callAuthSSO(String country) {
		String apiStatus = "", source = "SG", ApiUrl = "";
		String customerId = "test26072023@singx.co";

		HashMap<String, String> signXRequest = new HashMap<String, String>();
		HashMap<String, String> finalMap = new HashMap<String, String>();

		signXRequest.put("customerId", customerId);
		signXRequest.put("source", source);
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("countryCode", country);
		// signXRequest.put("countryCode", "SG");
		signXRequest.put("apiName", "AuthSSO");

		if (country.equals("SG") || country.equals("HK")) {
			ApiUrl = SGHKBaseURL + "/external-onboarding/sso/authenticate";
			signXRequest.put("method", "POST");
		} else if (country.equals("AU")) {
			signXRequest.put("method", "POST");
			ApiUrl = AUBaseURL + "/singx/customer/sso/authenticate";
		}

		try {
			finalMap = callApi("",ApiUrl, signXRequest, new ArrayList<>());
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
	}


//	Auth SSO API Ends!!!

//	Cust Details API Starts -->

	public String generateCustDtlsRequest(HashMap<String, String> signXRequest) {
		StringBuilder jsonRequest = new StringBuilder();

		String country = signXRequest.get("countryCode") == null ? "" : signXRequest.get("countryCode");

		String ekycRequest = "";

		if (country.equals("SG") || country.equals("HK")) {

			jsonRequest.append("{").append("\"source\":\"").append(signXRequest.get("source")).append("\",")
					.append("\"fromDate\":\"").append(signXRequest.get("fromDate")).append("\",")
					.append("\"toDate\":\"").append(signXRequest.get("toDate")).append("\",")
					.append("\"customerId\":\"").append(signXRequest.get("customerId")).append("\"").append("}");

			ekycRequest = jsonRequest.toString();
		} else if (country.equals("AU")) {
			jsonRequest = new StringBuilder();
			jsonRequest.append("{").append("\"fromDate\":\"").append(signXRequest.get("fromDate")).append("\",")
					.append("\"toDate\":\"").append(signXRequest.get("toDate")).append("\"").append("}");

			ekycRequest = jsonRequest.toString();

		}
		Logger.log("generateCustDtlsRequest returning : \n" + ekycRequest, FILENAME, LOGNAME, null, Logger.INFO);

		return ekycRequest;
	}

	private HashMap<String, String> readCustDtlsResponse(String fullResponse, String country) {
		String success = "", customerId = "", existingCustomer = "", errDesc = "", status = "", isExist = "false",
				message = "";
		/*
		 * SG HK - { "success": true, "token": "ChcnK9P7StpsW3br5aB8" }
		 * 
		 * AU -
		 * {"success":true,"token":"c3dldGhhQHNpbmd4LmNv:MjEwMDI1:TfIV6KVYCWQr1R2CGg0l"}
		 */

		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		if (null == fullResponse || fullResponse.isEmpty() || null == country || country.isEmpty())
			return signXApiResponse;

		try {
			resJsonObj = new JSONObject(fullResponse);

			String token = resJsonObj.getString("token");
			success = resJsonObj.getString("success");

			if (success.equals("true")) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			signXApiResponse.put("success", success);
			signXApiResponse.put("token", token);

		} catch (Throwable t) {
			Logger.log("Error while reading response in readCustStatusResponse(): " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
			signXApiResponse.put("errDesc", status);
		}
		return signXApiResponse;
	}

	private void callCustDtls(String country) {
		String apiStatus = "", source = "SG", ApiUrl = "";
		String customerId = "1000000114";

		HashMap<String, String> signXRequest = new HashMap<String, String>();
		HashMap<String, String> finalMap = new HashMap<String, String>();

		signXRequest.put("customerId", customerId);
		signXRequest.put("source", source);
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("countryCode", country);
		// signXRequest.put("countryCode", "SG");
		signXRequest.put("apiName", "CustDetails");

		if (country.equals("SG") || country.equals("HK")) {
			ApiUrl = SGHKBaseURL + "/external-onboarding/customerdetails";
			signXRequest.put("method", "POST");
		} else if (country.equals("AU")) {
			signXRequest.put("method", "POST");
			ApiUrl = AUBaseURL + "/singx/customer/details";
		}

		try {
			finalMap = callApi("",ApiUrl, signXRequest, new ArrayList<>());
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
	}

//	Cust Details API Ends!!!
	
//	Transaction APIs starts-->
	
	private Map<String, String> excuteTXNRequest(String targetURL, String requestEntity, String method, String ContentType) {

		Map<String,String> responseMap=new HashMap<String, String>();
		
		URL url;
		HttpURLConnection connection = null;
		StringBuffer response = new StringBuffer();
		

//		String token = "210116:API-IDF:Ztq4GAdREawJ8TbUUCGMO9pzT5Ot8i5rF4vEht5rr0cwf6xZ7Pom";
				

		try {
			try {
			    // Create connection
			    url = new URL(targetURL);
			    connection = (HttpURLConnection) url.openConnection();
			    connection.setRequestMethod(method);

			    connection.setRequestProperty("Accept", "application/json");
	            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36");
			    connection.setRequestProperty("tz", "Asia/Singapore");
			    connection.setRequestProperty("Content-Type", "application/json");
			    connection.setRequestProperty("X-API-Key", SingXToken);

			    // Send request
			    if (method.equals("POST")) {
			        connection.setDoOutput(true);
			        try (DataOutputStream wr = new DataOutputStream(connection.getOutputStream())) {
			            wr.write(requestEntity.getBytes(StandardCharsets.UTF_8));
			            wr.flush();
			        }
			    }

			    responseMap.put("responseCode", ""+connection.getResponseCode());
			    
			    // Get Response
			    InputStream is = connection.getResponseCode() >= 400 ? connection.getErrorStream() : connection.getInputStream();
			    if (is != null) {
			        try (BufferedReader rd = new BufferedReader(new InputStreamReader(is))) {
			            String line;
			            while ((line = rd.readLine()) != null) {
			                response.append(line).append("\r");
			            }
			        }
			    }
			} catch (Exception e) {
			} finally {
			    if (connection != null) {
			        connection.disconnect();
			    }
			}
		} catch (Throwable t) {
			Logger.log("excuteTXNRequest error : ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			response.append("");
		} finally {
			if (connection != null)
				connection.disconnect();
		}
		
		responseMap.put("responseString", response.toString());
		return responseMap;
	}
	
	private Map<String, String> excuteTXNEncryptedRequest(String targetURL, String requestEntity, String method, String ContentType) {
		
		Map<String,String> responseMap=new HashMap<String, String>();
		
		URL url;
		HttpURLConnection connection = null;
		StringBuffer response = new StringBuffer();
		
		String signatureSalt ="", signature=""; 
		long timestamp=0l;
		JSONObject payload = new JSONObject();
		
		if (method.equals("POST")) {
		
			try {
				// Generate signature salt
		        SecureRandom random = new SecureRandom();
		        byte[] saltBytes = new byte[16];
		        random.nextBytes(saltBytes);
		        signatureSalt = Base64.getEncoder().encodeToString(saltBytes);
				
		        // Get current timestamp (Unix time in seconds)
		        timestamp = (System.currentTimeMillis() / 1000) - 10;
		        
		        // Build the string to sign
		        String toSign = method.toLowerCase() + targetURL + signatureSalt + timestamp + SingXEncryptionSecret;
		        
		        // Generate the signature using HMAC-SHA256
		        Mac mac = Mac.getInstance("HmacSHA256");
		        SecretKeySpec secretKeySpec = new SecretKeySpec(SingXEncryptionSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
		        mac.init(secretKeySpec);
		        byte[] hmacSha256 = mac.doFinal(toSign.getBytes(StandardCharsets.UTF_8));
		        signature = Base64.getEncoder().encodeToString(hmacSha256);
		
		        SecretKeySpec keySpec = new SecretKeySpec(Base64.getDecoder().decode(SingXEncryptionSecret), "AES");
		        IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(signatureSalt));
		        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);
		        byte[] encryptedBytes = cipher.doFinal(requestEntity.getBytes(StandardCharsets.UTF_8));
		        String encryptedPayload = Base64.getEncoder().encodeToString(encryptedBytes);
		
		        // Create the final payload to be sent
		        
		        payload.put("data", encryptedPayload);
			}catch (Throwable t) {
				Logger.log("Encryption Error: ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			}
		}
		
		Logger.log("Encryption headers : \n signature : "+signature, FILENAME, LOGNAME, null, Logger.INFO);
		Logger.log("\n signatureSalt : "+signatureSalt, FILENAME, LOGNAME, null, Logger.INFO);
		Logger.log("\n timestamp : "+timestamp, FILENAME, LOGNAME, null, Logger.INFO);

		
		try {
			try {
				// Create connection
				url = new URL(targetURL);
				connection = (HttpURLConnection) url.openConnection();
				connection.setRequestMethod(method);
				
				connection.setRequestProperty("Accept", "application/json");
				connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36");
				connection.setRequestProperty("tz", "Asia/Singapore");
				connection.setRequestProperty("Content-Type", "application/json");
				connection.setRequestProperty("X-API-Key", SingXToken);
				
				// Send request
				if (method.equals("POST")) {
					connection.setDoOutput(true);
					//Set headers for encryption request-->
					connection.setRequestProperty("x-signature", signature);
					connection.setRequestProperty("x-salt", signatureSalt);
					connection.setRequestProperty("x-api-key", SingXToken);
					connection.setRequestProperty("x-timestamp", ""+timestamp);
					
					try (DataOutputStream wr = new DataOutputStream(connection.getOutputStream())) {
						wr.write(requestEntity.getBytes(StandardCharsets.UTF_8));
						wr.flush();
					}
				}
				
//				Logging all headers of connection -->
				Logger.log("Request Headers: ", FILENAME, LOGNAME, null, Logger.INFO);
		        for (Map.Entry<String, java.util.List<String>> header : connection.getRequestProperties().entrySet()) {
		        	Logger.log(header.getKey() + ": " + header.getValue(), FILENAME, LOGNAME, null, Logger.INFO);
		        }
				
				responseMap.put("responseCode", ""+connection.getResponseCode());
				
				// Get Response
				InputStream is = connection.getResponseCode() >= 400 ? connection.getErrorStream() : connection.getInputStream();
				if (is != null) {
					try (BufferedReader rd = new BufferedReader(new InputStreamReader(is))) {
						String line;
						while ((line = rd.readLine()) != null) {
							response.append(line).append("\r");
						}
					}
				}
			} catch (Throwable t) {
				Logger.log("excuteTXNRequest error : ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			} finally {
				if (connection != null) {
					connection.disconnect();
				}
			}
		} catch (Throwable t) {
			Logger.log("excuteTXNRequest error : ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			response.append("");
		} finally {
			if (connection != null)
				connection.disconnect();
		}
		
		responseMap.put("responseString", response.toString());
		return responseMap;
	}
	
	public HashMap<String, String> callTXNApi(String kongURL,String ApiUrl, HashMap<String, String> signXRequest) {
		int result = -1, reqinsResult = -1;
		String success = "", customerId = "", message = "", statusMsg = "", errDesc = "", fullRequest = "",
				fullResponse = "", status = "Error", ReqResUpdationResult = "Error", responseCodeDescription = "";
		String isExist = "";

		HashMap<String, String> signXApiResponseHm = new HashMap<String, String>();
		HashMap<String, String> SignXResData = new HashMap<String, String>();

		String groupId = signXRequest.get("groupId");
		String loginId = signXRequest.get("loginId");
		String userId = signXRequest.get("userId");
		String apiName = signXRequest.get("apiName");
		String method = signXRequest.get("method");
		
		try {
			Logger.log("************	SIGNX API Call Starts Here	************", FILENAME, LOGNAME, null,
					Logger.INFO);
			Logger.log("ApiUrl : "+ApiUrl, FILENAME, LOGNAME, null,Logger.INFO);
			Logger.log("signXRequest : "+signXRequest, FILENAME, LOGNAME, null,Logger.INFO);

			switch (apiName) {
				case "TXN_AUTH_DETAILS" :
					fullRequest = ""+ApiUrl;
					break;
				case "TXN_FX_EXCHANGE" :
					fullRequest = generateExchnageRequest(signXRequest);
					break;
				case "TXN_RECEIVER_ADD" :
					fullRequest = generateAddReceiverRequest(signXRequest);
					break;
				case "TXN_ALL_TRANSACTIONS" :
					fullRequest = ""+ApiUrl;
					break;
				case "TXN_CANCEL_TRANSACTION" :
					fullRequest = ""+ApiUrl;
					break;
				case "TXN_MASTER_LIST" :
					fullRequest = ""+ApiUrl;
					break;
				case "TXN_CREATE" :
					fullRequest = generateCreateRequest(signXRequest);
					break;
				case "TXN_PENDING_DOC" :
					fullRequest = ""+ApiUrl;
					break;
				default:
					Logger.log("Invalid apiName : \n" + apiName, FILENAME, LOGNAME, null, Logger.INFO);
			}
			Logger.log("fullRequest : \n" + fullRequest, FILENAME, LOGNAME, null, Logger.INFO);

			ArrayList<String> info = new ArrayList<String>();
			String responseString="";

			info.add(groupId); // 0
			info.add(userId == null ? "0" : userId); // 1
			info.add(loginId == null ? "0" : loginId); // 2
			info.add(fullRequest); // 3
			info.add(apiName); // 4
			info.add("0"); // 5
			try {
				reqinsResult = insertSingXDetails(info);
				Logger.log("reqinsResult : " + reqinsResult, FILENAME, LOGNAME, null, Logger.INFO);

			} catch (Throwable t) {
				Logger.log("Error in insertSingXDetails  ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			}
			
			if (!fullRequest.equals("")) {
				Map<String,String> responseMap=new HashMap<String, String>();
				
				if(isDev.equals("true")) {
					if (method.equals("POST"))
						responseString = singXAPICaller.excuteSingXEncryptedRequest(kongURL,ApiUrl, fullRequest, "POST", "application/json");
					else if (method.equals("GET"))
						responseString = singXAPICaller.excuteSingXEncryptedRequest(kongURL,ApiUrl, fullRequest, "GET", "application/json");
				}
				else {
				if (method.equals("POST"))
					responseString = excuteEncryptedRequest(kongURL, ApiUrl, fullRequest, "POST", "application/json");
				else if (method.equals("GET"))
					responseString = excuteEncryptedRequest(kongURL, ApiUrl, fullRequest, "GET", "application/json");
				}
				responseMap.put("responseString", responseString);
				
				if (null!=responseMap && !responseMap.isEmpty()) {
					Logger.log("fullResponse : \n" + responseMap.get("responseString"), FILENAME, LOGNAME, null, Logger.INFO);

					fullResponse= responseMap.containsKey("responseString")? responseMap.get("responseString") : "";

					switch (apiName) {
						case "TXN_AUTH_DETAILS":
							signXApiResponseHm = readAuthDetailsResponse(responseMap);
							break;
						case "TXN_FX_EXCHANGE":
							signXApiResponseHm = readExchangeResponse(responseMap);
							break;
						case "TXN_RECEIVER_ADD":
							signXApiResponseHm = readAddReceiverResponse(responseMap);
							break;
						case "TXN_ALL_TRANSACTIONS":
							signXApiResponseHm = readAllTxnResponse(responseMap);
							break;
						case "TXN_CANCEL_TRANSACTION":
							signXApiResponseHm = readCancelTxnResponse(responseMap);
							break;
						case "TXN_MASTER_LIST":
							signXApiResponseHm = readMasterListResponse(responseMap);
							break;
						case "TXN_CREATE":
							signXApiResponseHm = readCreateResponse(responseMap);
							break;
						case "TXN_PENDING_DOC":
							signXApiResponseHm = readPendingDocResponse(responseMap);
							break;
						default:
							Logger.log("Invalid apiName : \n" + apiName, FILENAME, LOGNAME, null, Logger.INFO);
					}
					
					try {
						JSONObject respObj=new JSONObject(responseString); // : {"success":true,"id":"1386226409","message":"Receiver added successfully"}
						if (respObj.has("message")) {
						    message = respObj.getString("message"); 
						}
						if (respObj.has("success")) {
						    boolean suc = respObj.getBoolean("success"); 
						    status = suc ? "Success" : "Error"; 
						}

						
						
					}catch(Throwable t) {
						Logger.log("Error in response mapping ", FILENAME, LOGNAME, t, Logger.CRITICAL);
					}

				}
				else {
					Logger.log("responseMap is empty" + responseMap, FILENAME, LOGNAME, null, Logger.INFO);
					status = "Error";
					errDesc = "Response is empty";
				}
			}
			else {
				Logger.log("fullRequest is empty : " + fullRequest, FILENAME, LOGNAME, null, Logger.INFO);
				status = "Error";
				errDesc = "Request is empty";
			}
			
			if (reqinsResult > 0) {
				ArrayList<String> updData = new ArrayList<String>();

				updData.add(groupId); // 0
				updData.add(loginId); // 1
				updData.add(""); // 2
				updData.add(userId); // 3
				updData.add(status); // 4
				updData.add(fullRequest.trim()); // 5
				//updData.add(fullResponse.trim()); // 6
				updData.add(responseString.trim()); // 6
				updData.add(success); // 7
				updData.add(customerId); // 8
				updData.add(message); // 9
				updData.add(statusMsg); // 10
				updData.add(errDesc); // 11
				updData.add(String.valueOf(reqinsResult)); // 12
				updData.add(""); // 13

				try {
					Logger.log("updateSingXDetails updData: " + updData.toString(), FILENAME, LOGNAME,
							null, Logger.INFO);
					result = updateSingXDetails(updData);
					Logger.log("updateSingXDetails result: " + result + "\t LoginId: " + loginId, FILENAME, LOGNAME,
							null, Logger.INFO);
					if (result >= 1)
						ReqResUpdationResult = "Success";
					else
						ReqResUpdationResult = "Update Records Fail";
				} catch (Throwable t) {
					result = -1;
					Logger.log("Error in updateSingXDetails TXN ", FILENAME, LOGNAME, t, Logger.CRITICAL);
				}
			}
			
		} catch (Throwable t) {
			Logger.log("## Error in callTXNApi ##", FILENAME, LOGNAME, t, Logger.CRITICAL);
			errDesc = "Error calling callTXNApi method ##";
			status = "Error";
		}
		
		signXApiResponseHm.put("responseString", fullResponse);
		signXApiResponseHm.put("ReqResUpdationResult", ReqResUpdationResult);
		signXApiResponseHm.put("errDesc", errDesc);
		signXApiResponseHm.put("status", status);
		
		return signXApiResponseHm;
	}
	
//	1. GET Auth Details-->
	private void callAuthDetails() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/auth/details";
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "GET");
		signXRequest.put("apiName", "TXN_AUTH_DETAILS");

		
		try {
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);

			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);

		}
		
	}
	
	
	private HashMap<String, String> readAuthDetailsResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}
	
//	2. FX_Exchange -->
	private void callExchange() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/exchange/v3";
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "POST");
		signXRequest.put("apiName", "TXN_FX_EXCHANGE");
		
		signXRequest.put("fromCurrency", "SGD");
		signXRequest.put("toCurrency", "USD");
		signXRequest.put("amount", "1000.00");
		signXRequest.put("type", "Send");
		signXRequest.put("paymentType", "LOCAL_BANK");
		
		
		try {
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callSignXExistingCustApi ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	public String generateExchnageRequest(HashMap<String, String> signXRequest) {
		
		StringBuilder jsonRequest = new StringBuilder();
		String request="";
		signXRequest.put("txnFeeType", "OUR");
		signXRequest.put("productType", "Remittance");
		signXRequest.put("cashPickup", "false");
		signXRequest.put("swift", "false");

		jsonRequest.append("{")
        .append("\"fromCurrency\":\"").append(signXRequest.get("fromCurrency")).append("\",")
        .append("\"toCurrency\":\"").append(signXRequest.get("toCurrency")).append("\",")
        .append("\"amount\":").append(signXRequest.get("amount")).append(",")
        .append("\"type\":\"").append(signXRequest.get("type")).append("\",")
        .append("\"paymentType\":\"").append(signXRequest.get("paymentType")).append("\",")
        .append("\"txnFeeType\":\"").append(signXRequest.get("txnFeeType")).append("\",")
        .append("\"productType\":\"").append(signXRequest.get("productType")).append("\",")
        .append("\"cashPickup\":").append(signXRequest.get("cashPickup")).append(",")
        .append("\"swift\":").append(signXRequest.get("swift"))
        .append("}");

		request=jsonRequest.toString();
		
		Logger.log("generateExchnageRequest returning : \n" + request, FILENAME, LOGNAME, null, Logger.INFO);

		return request;
	}

	private HashMap<String, String> readExchangeResponse(Map<String, String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode") == null || responseMap.isEmpty() ? "0" : responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				JSONObject jsonObject = new JSONObject(fullResponse);
		        double exchangeRate = jsonObject.getDouble("exchangeRate");
				signXApiResponse.put("status", "Success");
				signXApiResponse.put("exchangeRate", ""+exchangeRate);
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}
	
//	3. Receiver Add-->
	private void callAddReceiver() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/receivers/mass/v2/add/";
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "POST");
		signXRequest.put("apiName", "TXN_RECEIVER_ADD");
		
		signXRequest.put("country", "India");
        signXRequest.put("currency", "INR");
        signXRequest.put("paymentType", "LOCAL_BANK");
        signXRequest.put("receiverType", "Individual");
        signXRequest.put("email", "pradeep@singx.co");
        signXRequest.put("receiverFirstName", "Pradeep");
        signXRequest.put("senderRelationship", "Self");
        signXRequest.put("receiverLastName", "K");
        signXRequest.put("senderId", "XXXXXXX");
        signXRequest.put("accountNumber", "1234114141234");
        signXRequest.put("address", "Address");
        signXRequest.put("ifsc", "BARB0MAHMOR");
        signXRequest.put("receiverId", "XXXXXXX-1");
        signXRequest.put("accountType", "SAVINGS");
		
		try {
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callAddReceiver ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	public String generateAddReceiverRequest(HashMap<String, String> signXRequest) {
		StringBuilder jsonRequest = new StringBuilder();
		String request="";
		
		jsonRequest.append("{")
        .append("\"country\":\"").append(signXRequest.get("country")).append("\",")
        .append("\"currency\":\"").append(signXRequest.get("currency")).append("\",")
        .append("\"paymentType\":\"").append(signXRequest.get("paymentType")).append("\",")
        .append("\"receiverType\":\"").append(signXRequest.get("receiverType")).append("\",")
        .append("\"email\":\"").append(signXRequest.get("email")).append("\",")
        .append("\"receiverFirstName\":\"").append(signXRequest.get("receiverFirstName")).append("\",")
        .append("\"senderRelationship\":\"").append(signXRequest.get("senderRelationship")).append("\",")
        .append("\"receiverLastName\":\"").append(signXRequest.get("receiverLastName")).append("\",")
        .append("\"senderId\":\"").append(signXRequest.get("senderId")).append("\",")
        .append("\"accountNumber\":\"").append(signXRequest.get("accountNumber")).append("\",")
        .append("\"address\":\"").append(signXRequest.get("address")).append("\",")
        .append("\"ifsc\":\"").append(signXRequest.get("ifsc")).append("\",")
        .append("\"receiverId\":\"").append(signXRequest.get("receiverId")).append("\",")
        .append("\"accountType\":\"").append(signXRequest.get("accountType")).append("\"")
        .append("}");
		request=jsonRequest.toString();
		
		Logger.log("generateAddReceiverRequest returning : \n" + request, FILENAME, LOGNAME, null, Logger.INFO);

		return request;
	}

	private HashMap<String, String> readAddReceiverResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}

	
//	4. All Txn-->
	private void callAllTxn() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> getReqMap		= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/transactions/mass/v2/";
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "GET");
		signXRequest.put("apiName", "TXN_ALL_TRANSACTIONS");
		
		getReqMap.put("page", "0");
		getReqMap.put("size", "10");
		getReqMap.put("filter", "createdDate GT '2022-08-08 00:00:00';createdDate LT '2023-09-07 23:59:59'");
				
		try {
			ApiUrl=buildUrlWithParams(ApiUrl, getReqMap);
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callAllTxn ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	
	
	private HashMap<String, String> readAllTxnResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}
	

	
//	5. Cancel Transaction Add-->
	private void callCancelTxn() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> getReqMap		= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/transactions/mass/v1/:transactionID/cancel";
		
		String transactionId="1199002200";
		
		ApiUrl=ApiUrl.replace(":transactionID", transactionId);
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "GET");
		signXRequest.put("apiName", "TXN_CANCEL_TRANSACTION");
		
		
		try {
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callCancelTxn ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	
	
	private HashMap<String, String> readCancelTxnResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}
	
//	6. Master List-->
	private void callMasterList() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> getReqMap		= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/transactions/mass/v1/codes";
		
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "GET");
		signXRequest.put("apiName", "TXN_MASTER_LIST");
		
		
		try {
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callMasterList ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	
	
	private HashMap<String, String> readMasterListResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}

//	7. Create-->
	private void callCreate() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> getReqMap		= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/transactions/mass/v2/create";
		
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "POST");
		signXRequest.put("apiName", "TXN_CREATE");
		
		signXRequest.put("senderId", "210XXX000000");
        signXRequest.put("transactionId", "TXN-ID");
        signXRequest.put("receiverId", "RECEIVER-ID");
        signXRequest.put("sendCurrency", "SGD");
        signXRequest.put("type", "Send");
        signXRequest.put("receiveCurrency", "INR");
        signXRequest.put("amount", "1000");  // Storing amount as String, will be handled as int
        signXRequest.put("purposeCode", "Transfer to own account");
        signXRequest.put("comments", "test");
        signXRequest.put("quote", "<QUOTE IF REQUIRED>");
        signXRequest.put("paymentType", "LOCAL_BANK");
        signXRequest.put("invoiceNumber", "");
        signXRequest.put("fricRBICode", "");
        signXRequest.put("cnyPurpose", "");
        
        
		
		try {
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callCreate ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	public String generateCreateRequest(HashMap<String, String> signXRequest) {
		StringBuilder jsonRequest = new StringBuilder();
		String request="";
		
		signXRequest.put("fricRBICode", "");
		signXRequest.put("invoiceNumber", "");

		/*jsonRequest.append("{")
		.append("\"senderId\":\"").append(signXRequest.get("senderId")).append("\",")
        .append("\"transactionId\":\"").append(signXRequest.get("transactionId")).append("\",")
        .append("\"receiverId\":\"").append(signXRequest.get("receiverId")).append("\",")
        .append("\"sendCurrency\":\"").append(signXRequest.get("sendCurrency")).append("\",")
        .append("\"type\":\"").append(signXRequest.get("type")).append("\",")
        .append("\"receiveCurrency\":\"").append(signXRequest.get("receiveCurrency")).append("\",")

        // Handling 'amount' as an integer
        .append("\"amount\":").append(Integer.parseInt(signXRequest.get("amount"))).append(",")

        .append("\"purposeCode\":\"").append(signXRequest.get("purposeCode")).append("\",")
        .append("\"comments\":\"").append(signXRequest.get("comments")).append("\",")
        .append("\"quote\":\"").append(signXRequest.get("quote")).append("\",")
        .append("\"paymentType\":\"").append(signXRequest.get("paymentType")).append("\",")
        .append("\"invoiceNumber\":\"").append(signXRequest.get("invoiceNumber")).append("\",")
        .append("\"fricRBICode\":\"").append(signXRequest.get("fricRBICode")).append("\",")
        .append("\"cnyPurpose\":\"").append(signXRequest.get("cnyPurpose")).append("\"")
        .append("}");
		*/

		jsonRequest.append("{")
	    //.append("\"country\":\"").append(signXRequest.get("country")).append("\",")
	    .append("\"receiveCurrency\":\"").append(signXRequest.get("currency")).append("\",")
	    .append("\"paymentType\":\"").append(signXRequest.get("paymentType")).append("\",")
	    .append("\"type\":\"").append(signXRequest.get("type")).append("\",")
	    //.append("\"email\":\"").append(signXRequest.get("email")).append("\",")
	    //.append("\"receiverFirstName\":\"").append(signXRequest.get("receiverFirstName")).append("\",")
	    //.append("\"senderRelationship\":\"").append(signXRequest.get("senderRelationship")).append("\",")
	    //.append("\"receiverLastName\":\"").append(signXRequest.get("receiverLastName")).append("\",")

	    // Handling 'senderId', default to "null" if not present
	    .append("\"senderId\":\"").append(signXRequest.getOrDefault("senderId", "null")).append("\",")
	    
	    //.append("\"accountNumber\":\"").append(signXRequest.get("accountNumber")).append("\",")
	    //.append("\"address\":\"").append(signXRequest.get("address")).append("\",")
	    //.append("\"ifsc\":\"").append(signXRequest.get("ifsc")).append("\",")
	    .append("\"receiverId\":\"").append(signXRequest.get("receiverId")).append("\",")
	    .append("\"transactionId\":\"").append(signXRequest.get("transactionId")).append("\",")
	    .append("\"sendCurrency\":\"").append(signXRequest.get("sendCurrency")).append("\",")
	    .append("\"purposeCode\":\"").append(signXRequest.get("purposeCode")).append("\",")
	    .append("\"amount\":").append(signXRequest.get("amount")).append(",")
	    .append("\"comments\":\"").append("Sending amount").append("\",")
	    //.append("\"quoteId\":\"").append("null").append("\",")
	    .append("\"quote\":\"").append(signXRequest.get("quoteId")).append("\",")
	    .append("\"invoiceNumber\":\"").append(signXRequest.get("invoiceNumber")).append("\",")
	    .append("\"fricRBICode\":\"").append(signXRequest.get("fricRBICode")).append("\",")
	    //.append("\"cnyPurpose\":\"").append("cnyPurpose").append("\",")
	    .append("\"promoCode\":\"").append(signXRequest.get("promoCode")).append("\",")
	    .append("\"addressOfDelivery\":\"").append("null").append("\",")
	    .append("\"customsDecDate\":\"").append("null").append("\",")
	    .append("\"customsDecFormNo\":\"").append("null").append("\",")
	    .append("\"invoiceDate\":\"").append("null").append("\",")
	    .append("\"logisticsCompany\":\"").append("null").append("\",")
	    .append("\"logisticsOrderNo\":\"").append("null").append("\",")
	    .append("\"otherReference\":\"").append("null").append("\",")
	    .append("\"productName\":\"").append("null").append("\",")
	    .append("\"txnFeeType\":\"").append("null").append("\"")

	    //.append("\"accountType\":\"").append(signXRequest.get("accountType")).append("\"")
	    .append("}");

/*
 * 
 * {
    "country": "SG",
    "receiveCurrency": "INR",
    "paymentType": "LOCAL_BANK",
    "type": "Send",
    "email": "rfx1@test.com",
    "receiverFirstName": "Stevven",
    "senderRelationship": "Brother",
    "receiverLastName": "hello",
    "senderId": "rfx1@test.com",
    "accountNumber": "753951285",
    "address": "Mumbai",
    "ifsc": "ABHY0065203",
    "receiverId": "1190892721",
    "accountType": "SAVINGS",
    "transactionId":"98741372450003",
    "sendCurrency":"SGD",
    "purposeCode":"FAMILY_SUPPORT"
}	
 */
		
		request=jsonRequest.toString();
		
		Logger.log("generateCreateRequest returning : \n" + request, FILENAME, LOGNAME, null, Logger.INFO);

		return request;
	}
	
	private HashMap<String, String> readCreateResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}
	
//	7. PENDING DOC-->
	private void callPendingDoc() {
		HashMap<String, String> signXRequest	= new HashMap<String, String>();
		HashMap<String, String> getReqMap		= new HashMap<String, String>();
		HashMap<String, String> finalMap		= new HashMap<String, String>();
		String apiStatus = "";
		String ApiUrl = TXNBASEPATH + "/transactions/mass/v1/pendingdocuments";
		
		
		signXRequest.put("groupId", "IDFCIN");
		signXRequest.put("loginId", "0");
		signXRequest.put("userId", "0");
		signXRequest.put("method", "GET");
		signXRequest.put("apiName", "TXN_PENDING_DOC");
		
		getReqMap.put("page", "0");
		getReqMap.put("size", "10");
		getReqMap.put("filter", "");
		
		try {
			ApiUrl=buildUrlWithParams(ApiUrl, getReqMap);
			finalMap = callTXNApi("",ApiUrl, signXRequest);
			apiStatus = finalMap.get("status");
			Logger.log("apiStatus : " + apiStatus, FILENAME, LOGNAME, null, Logger.INFO);
			
			System.out.println(apiStatus);
		} catch (Throwable t) {
			Logger.log("ERROR calling callPendingDoc ", FILENAME, LOGNAME, t, Logger.CRITICAL);
			
		}
		
	}
	
	
	
	
	private HashMap<String, String> readPendingDocResponse(Map<String,String> responseMap){
		String success = "", customerId = "", existingCustomer = "", errDesc = "", isExist = "false",message="";
		int status=0;
		/*
		 * {
		    "timestamp": "2024-08-28T05:33:11.841+00:00",
		    "status": 401,
		    "error": "Unauthorized",
		    "message": "Unauthorized",
		    "path": "/api/auth/details"
		}
		 * */
		
		HashMap<String, String> signXApiResponse = new HashMap<String, String>();
		JSONObject resJsonObj, eKycRes, responseObj, userPhoto;

		String fullResponse	=	responseMap.get("responseString");
		int responseCode	=	Integer.parseInt(responseMap.get("responseCode"));
		
		if (null == fullResponse || fullResponse.isEmpty())
			return signXApiResponse;
		
		try {
			if (responseCode<=400) {
				signXApiResponse.put("status", "Success");
			} else {
				signXApiResponse.put("status", "Error");
			}

			
		} catch (Throwable t) {
			Logger.log("Error while reading response in readAuthDetailsResponse Response: " + signXApiResponse, FILENAME,
					LOGNAME, t, Logger.CRITICAL);
			signXApiResponse.put("status", "Error");
		}
		return signXApiResponse;
	}
	
	
	

	public static void main(String[] args) {
		new SingXIntegrations().callExistingCustAPI("SG");
/*
		new SingXIntegrations().callGenerateOTP("SG");

		new SingXIntegrations().callVerifyOTPApi("SG");

		new SingXIntegrations().callCustRegAPI("SG");

		new SingXIntegrations().callCustStatus("SG");

		new SingXIntegrations().callAuthSSO("SG");

		new SingXIntegrations().callCustDtls("SG");
		*/
		new SingXIntegrations().callAuthDetails();
		
		new SingXIntegrations().callAddReceiver();


		
	}

}
